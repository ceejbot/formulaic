name: release
permissions:
    contents: write

on:
    push:
        tags:
            - "v**[0-9]+.[0-9]+.[0-9]+*"
    workflow_dispatch:
        inputs:
            refname:
                type: string
                description: the refname to build a release from
                default: latest

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    CARGO_TERM_COLOR: always

jobs:
    preflight:
        name: preflight
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: get stable + nightly Rust
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: nightly, stable
                  target: x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu
                  components: clippy, rustfmt
                  cache-directories: |
                      ~/.cargo/registry
                      ~/.cargo/bin
                      target

            - name: consult Clippy
              run: cargo +stable clippy --all-targets

            - name: check formatting
              run: cargo +nightly fmt --check --all

            - name: create github release
              continue-on-error: true # for testing
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  release_url=$(gh release create ${{ github.ref_name }} --generate-notes)

    release-linux:
        name: release-linux
        runs-on: ubuntu-latest
        needs: preflight
        steps:
            - uses: actions/checkout@v4

            - name: get stable Rust
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: stable
                  cache-directories: |
                      ~/.cargo/registry
                      ~/.cargo/bin
                      target

            - name: build for release and upload
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  cargo +stable build --release
                  tar czf formulaic-x86_64-unknown-linux-gnu.tar.gz --strip-components=2  ./target/release/formulaic
                  gh release upload ${{ github.ref_name }} "formulaic-x86_64-unknown-linux-gnu.tar.gz"

                  digest=$(shasum -a 256 formulaic-x86_64-unknown-linux-gnu.tar.gz)
                  shasum=$(echo $digest | { read first rest; echo $first; } )
                  echo $shasum > formulaic-"x86_64-unknown-linux-gnu".tar.gz.sha256
                  gh release upload "${{ github.ref_name }}" "formulaic-x86_64-unknown-linux-gnu.tar.gz.sha256"

    release-macos:
        name: release-macos
        runs-on: macos-latest
        needs: preflight
        steps:
            - uses: actions/checkout@v4

            - name: get stable Rust
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: stable
                  target: aarch64-apple-darwin, x86_64-apple-darwin
                  cache-directories: |
                      ~/.cargo/registry
                      ~/.cargo/bin
                      target

            - name: build for release
              run: |
                  cargo +stable build --release --target aarch64-apple-darwin
                  cargo +stable build --release --target x86_64-apple-darwin

            - name: upload release assets
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  mkdir -p dist
                  cd dist
                  for target in "aarch64-apple-darwin" "x86_64-apple-darwin"; do
                      tar czf formulaic-$target.tar.gz --strip-components=4  ../target/$target/release/formulaic
                      gh release upload ${{ github.ref_name }} "formulaic-$target.tar.gz"

                      digest=$(shasum -a 256 formulaic-$target.tar.gz)
                      shasum=$(echo $digest | { read first rest; echo $first; } )
                      echo $shasum > formulaic-"$target".tar.gz.sha256
                      gh release upload "${{ github.ref_name }}" "formulaic-$target.tar.gz.sha256"
                  done
                  gh release edit "${{ github.ref_name }}" --draft=false

            - name: generate a formula file for all assets
              env:
                  GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  formula_file=$(./target/aarch64-apple-darwin/release/formulaic ./Cargo.toml)
                  mv $formula_file formulaic.rb

            - name: update the homebrew tap
              env:
                  GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
              shell: bash
              run: |
                  gh repo clone ceejbot/homebrew-tap
                  cd homebrew-tap || exit 1
                  cp ../formulaic.rb Formula/
                  git add Formula/formulaic.rb
                  git config user.name "formula robot"
                  git config user.email "ceejceej@gmail.com"
                  git commit -m "formulaic ${{ github.ref_name }}"
                  git push https://x-access-token:${{ secrets.HOMEBREW_TAP_TOKEN }}@github.com/ceejbot/homebrew-tap.git
